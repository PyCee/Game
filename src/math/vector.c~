

#include "../dataTypes.h"
#include "vector.h"

#include <stdlib.h>
#include <stdio.h>

#include "gMath.h"
#include "matrix.h"

void genVector
(Vector_t *vec)
{
	genMatrix(vec, 1, 4);
}
void freeVector
(Vector_t *vec)
{
	freeMatrix(vec);
}
void copyVector
(Vector_t *recieve, Vector_t *send)
{
	copyMatrix(recieve, send);
}
Vector_t * addVectors
(Vector_t vecOne, Vector_t vecTwo)
{
	return addMatricies(vecOne, vecTwo);
}
Vector_t * subtractVectors
(Vector_t vecOne, Vector_t vecTwo)
{
	return addMatricies(vecOne, MultiplyMartixNum(vecTwo, -1));
}
Vector_t * scaleVector
(Vector_t vector, F32 scale)
{
	return MultiplyMatrixNum(vector, scale);
}
F32 DotProduct
(Vector_t vecOne, Vector_t vecTwo)
{
	return getVecX(vecOne) * getVecX(vecTwo) + getVecX(vecOne) * getVecZ(vecTwo) + getVecZ(vecOne) * getVecZ(vecTwo);
}
F32 CrossProduct(Vector_t, Vector_t);
void PrintVector
(Vector_t vec)
{
	printf("[ %f, %f, %f]\n", getVecX(vec), getVecY(vec), getVecZ(vec));
}

F64		*		getVecXPtr		(Vector_t *vec)		{		return getMatrixEle(vec, 0, 0);			}
F64		*		getVecYPtr		(Vector_t *vec)		{		return getMatrixEle(vec, 0, 1);			}
F64		*		getVecZPtr		(Vector_t *vec)		{		return getMatrixEle(vec, 0, 2);			}
F64				getVecX				(Vector_t vec)		{		return *getMatrixEle(&vec, 0, 0);		}
F64				getVecY				(Vector_t vec)		{		return *getMatrixEle(&vec, 0, 1);		}
F64				getVecZ				(Vector_t vec)		{		return *getMatrixEle(&vec, 0, 2);		}
